
-- Create poshak_seva_bookings table if it doesn't exist
CREATE TABLE IF NOT EXISTS poshak_seva_bookings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name TEXT NOT NULL,
    email TEXT NOT NULL,
    mobile_number TEXT NOT NULL,
    seva_date DATE NOT NULL,
    poshak_type TEXT NOT NULL,
    occasion TEXT,
    additional_notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    status TEXT DEFAULT 'pending',
    payment_status TEXT DEFAULT 'unpaid',
    admin_notes TEXT
);

-- Add comment to the table
COMMENT ON TABLE poshak_seva_bookings IS 'Stores bookings for Poshak Seva';

-- Enable Row Level Security
ALTER TABLE poshak_seva_bookings ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to avoid conflicts
DO $$
BEGIN
  DROP POLICY IF EXISTS poshak_seva_anonymous_insert_policy ON poshak_seva_bookings;
  DROP POLICY IF EXISTS poshak_seva_user_select_policy ON poshak_seva_bookings;
  DROP POLICY IF EXISTS poshak_seva_admin_policy ON poshak_seva_bookings;
EXCEPTION WHEN OTHERS THEN
  -- Do nothing if policies don't exist
END $$;

-- Policy for anonymous users - can insert but not read
CREATE POLICY poshak_seva_anonymous_insert_policy ON poshak_seva_bookings
    FOR INSERT TO anon
    WITH CHECK (true);

-- Policy for authenticated users - can read only their own bookings
CREATE POLICY poshak_seva_user_select_policy ON poshak_seva_bookings
    FOR SELECT TO authenticated
    USING (email = auth.email());

-- Policy for admins - can do everything
CREATE POLICY poshak_seva_admin_policy ON poshak_seva_bookings
    FOR ALL TO authenticated
    USING (
        auth.uid() IN (
            SELECT user_id FROM user_details WHERE is_admin = true
        )
    );
