
-- Create user_details table if it doesn't exist
CREATE TABLE IF NOT EXISTS user_details (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    email TEXT NOT NULL,
    username TEXT NOT NULL,
    language_preference TEXT DEFAULT 'en',
    is_admin BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_sign_in TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
);

-- Add comment to the table
COMMENT ON TABLE user_details IS 'Stores user profile details';

-- Enable Row Level Security
ALTER TABLE user_details ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to avoid conflicts
DROP POLICY IF EXISTS users_select_policy ON user_details;
DROP POLICY IF EXISTS users_insert_policy ON user_details;
DROP POLICY IF EXISTS users_update_policy ON user_details;

-- Create policies
-- Policy for users to view their own data
CREATE POLICY users_select_policy ON user_details
    FOR SELECT 
    USING (auth.uid() = user_id);

-- Policy for users to insert their own data
CREATE POLICY users_insert_policy ON user_details
    FOR INSERT 
    WITH CHECK (auth.uid() = user_id);

-- Policy for users to update their own data
CREATE POLICY users_update_policy ON user_details
    FOR UPDATE 
    USING (auth.uid() = user_id);

-- Add a default admin user (optional)
INSERT INTO user_details (user_id, email, username, is_admin)
VALUES 
('00000000-0000-0000-0000-000000000000', 'admin@example.com', 'admin', true)
ON CONFLICT (user_id) DO NOTHING;
