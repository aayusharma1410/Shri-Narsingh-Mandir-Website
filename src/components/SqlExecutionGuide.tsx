
import { useState } from 'react';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger,
  DialogDescription
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Check, Copy, Database } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';

interface SqlExecutionGuideProps {
  trigger: React.ReactNode;
}

const SqlExecutionGuide = ({ trigger }: SqlExecutionGuideProps) => {
  const { language } = useLanguage();
  const [copied, setCopied] = useState<string | null>(null);
  
  const copyToClipboard = (text: string, id: string) => {
    navigator.clipboard.writeText(text);
    setCopied(id);
    setTimeout(() => setCopied(null), 2000);
  };
  
  // Notice table SQL
  const noticesSql = `-- Create notices table if it doesn't exist
CREATE TABLE IF NOT EXISTS notices (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    title_hi TEXT,
    content TEXT NOT NULL,
    content_hi TEXT,
    is_important BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id)
);

-- Add comment to the table
COMMENT ON TABLE notices IS 'Stores temple notices and announcements';

-- Set up Row Level Security
ALTER TABLE notices ENABLE ROW LEVEL SECURITY;

-- Create policies
-- Policy for everyone to view notices
CREATE POLICY notices_select_policy ON notices
    FOR SELECT 
    USING (true);

-- Policy for admins to manage notices
CREATE POLICY notices_admin_policy ON notices
    FOR ALL TO authenticated
    USING (
        auth.uid() IN (
            SELECT user_id FROM user_details WHERE is_admin = true
        )
    );

-- Sample notices for demonstration
INSERT INTO notices (title, title_hi, content, content_hi, is_important)
VALUES 
('Temple Renovation', 'मंदिर का जीर्णोद्धार', 'We are pleased to announce that temple renovation work will begin next month.', 'हमें यह घोषणा करते हुए प्रसन्नता हो रही है कि मंदिर के जीर्णोद्धार का कार्य अगले महीने से प्रारंभ होगा।', true),
('Annual Festival', 'वार्षिक उत्सव', 'Annual temple festival will be celebrated from 15th to 21st May with special ceremonies.', 'वार्षिक मंदिर उत्सव 15 से 21 मई तक विशेष समारोहों के साथ मनाया जाएगा।', false),
('Bhajan Sandhya', 'भजन संध्या', 'Join us for a special Bhajan Sandhya program every Saturday evening at 7 PM.', 'हर शनिवार शाम 7 बजे होने वाले विशेष भजन संध्या कार्यक्रम में हमारे साथ शामिल हों।', false);
`;

  // Poshak Seva bookings SQL
  const poshakSql = `-- Create poshak_seva_bookings table if it doesn't exist
CREATE TABLE IF NOT EXISTS poshak_seva_bookings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name TEXT NOT NULL,
    email TEXT NOT NULL,
    mobile_number TEXT NOT NULL,
    seva_date DATE NOT NULL,
    poshak_type TEXT NOT NULL,
    occasion TEXT,
    additional_notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    status TEXT DEFAULT 'pending',
    payment_status TEXT DEFAULT 'unpaid',
    admin_notes TEXT
);

-- Add comment to the table
COMMENT ON TABLE poshak_seva_bookings IS 'Stores bookings for Poshak Seva';

-- Set up Row Level Security
ALTER TABLE poshak_seva_bookings ENABLE ROW LEVEL SECURITY;

-- Create policies
-- Policy for anonymous users - can insert but not read
CREATE POLICY poshak_seva_anonymous_insert_policy ON poshak_seva_bookings
    FOR INSERT TO anon
    WITH CHECK (true);

-- Policy for authenticated users - can read only their own bookings
CREATE POLICY poshak_seva_user_select_policy ON poshak_seva_bookings
    FOR SELECT TO authenticated
    USING (email = auth.email());

-- Policy for admins - can do everything
CREATE POLICY poshak_seva_admin_policy ON poshak_seva_bookings
    FOR ALL TO authenticated
    USING (
        auth.uid() IN (
            SELECT user_id FROM user_details WHERE is_admin = true
        )
    );
`;

  return (
    <Dialog>
      <DialogTrigger asChild>
        {trigger}
      </DialogTrigger>
      <DialogContent className="sm:max-w-3xl max-h-[80vh]">
        <DialogHeader>
          <DialogTitle>
            {language === 'en' ? "SQL Setup Instructions" : "SQL सेटअप निर्देश"}
          </DialogTitle>
          <DialogDescription>
            {language === 'en' 
              ? "Run these SQL scripts in your Supabase SQL Editor to create the required tables." 
              : "आवश्यक तालिकाएँ बनाने के लिए इन SQL स्क्रिप्ट को अपने Supabase SQL एडिटर में चलाएँ।"}
          </DialogDescription>
        </DialogHeader>
        
        <Tabs defaultValue="notices" className="mt-4">
          <TabsList className="grid grid-cols-2">
            <TabsTrigger value="notices" className="flex items-center gap-2">
              <Database className="h-4 w-4" />
              {language === 'en' ? "Notices Table" : "सूचना तालिका"}
            </TabsTrigger>
            <TabsTrigger value="poshak" className="flex items-center gap-2">
              <Database className="h-4 w-4" />
              {language === 'en' ? "Poshak Seva Table" : "पोशाक सेवा तालिका"}
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="notices" className="mt-4 border rounded-md">
            <div className="p-4 bg-muted/50">
              <div className="flex justify-between items-center mb-2">
                <h3 className="text-sm font-semibold">
                  {language === 'en' ? "Notices Table SQL" : "सूचना तालिका SQL"}
                </h3>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => copyToClipboard(noticesSql, 'notices')}
                  className="h-8 flex items-center gap-1"
                >
                  {copied === 'notices' ? (
                    <>
                      <Check className="h-3 w-3" />
                      {language === 'en' ? "Copied" : "कॉपी किया गया"}
                    </>
                  ) : (
                    <>
                      <Copy className="h-3 w-3" />
                      {language === 'en' ? "Copy" : "कॉपी करें"}
                    </>
                  )}
                </Button>
              </div>
              <ScrollArea className="h-[300px] rounded-md border bg-muted">
                <pre className="p-4 text-xs">
                  {noticesSql}
                </pre>
              </ScrollArea>
            </div>
          </TabsContent>
          
          <TabsContent value="poshak" className="mt-4 border rounded-md">
            <div className="p-4 bg-muted/50">
              <div className="flex justify-between items-center mb-2">
                <h3 className="text-sm font-semibold">
                  {language === 'en' ? "Poshak Seva Table SQL" : "पोशाक सेवा तालिका SQL"}
                </h3>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => copyToClipboard(poshakSql, 'poshak')}
                  className="h-8 flex items-center gap-1"
                >
                  {copied === 'poshak' ? (
                    <>
                      <Check className="h-3 w-3" />
                      {language === 'en' ? "Copied" : "कॉपी किया गया"}
                    </>
                  ) : (
                    <>
                      <Copy className="h-3 w-3" />
                      {language === 'en' ? "Copy" : "कॉपी करें"}
                    </>
                  )}
                </Button>
              </div>
              <ScrollArea className="h-[300px] rounded-md border bg-muted">
                <pre className="p-4 text-xs">
                  {poshakSql}
                </pre>
              </ScrollArea>
            </div>
          </TabsContent>
        </Tabs>
        
        <div className="mt-4 space-y-4">
          <div className="rounded-md bg-blue-50 p-4 border border-blue-200">
            <h4 className="font-medium text-blue-700 mb-2">
              {language === 'en' ? "How to run these scripts:" : "इन स्क्रिप्ट को कैसे चलाएँ:"}
            </h4>
            <ol className="list-decimal pl-5 space-y-2 text-sm text-blue-600">
              <li>
                {language === 'en' 
                  ? "Go to your Supabase dashboard and open the SQL Editor" 
                  : "अपने Supabase डैशबोर्ड पर जाएँ और SQL एडिटर खोलें"}
              </li>
              <li>
                {language === 'en' 
                  ? "Copy the SQL script for the table you want to create" 
                  : "जिस तालिका को बनाना चाहते हैं उसके लिए SQL स्क्रिप्ट कॉपी करें"}
              </li>
              <li>
                {language === 'en' 
                  ? "Paste the script into the SQL Editor and click 'Run'" 
                  : "स्क्रिप्ट को SQL एडिटर में पेस्ट करें और 'Run' पर क्लिक करें"}
              </li>
              <li>
                {language === 'en' 
                  ? "Refresh this page to see the changes" 
                  : "परिवर्तन देखने के लिए इस पेज को रिफ्रेश करें"}
              </li>
            </ol>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default SqlExecutionGuide;
